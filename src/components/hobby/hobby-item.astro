---
import { cn } from '@/lib/utils'

const { icon: Icon, label, description, mediaUrl, index } = Astro.props
---

<div
  class={cn(
    'hobby-item group flex flex-col items-center gap-3',
    'animate-fade-up',
    `delay-[${index * 100}ms]`,
    mediaUrl && 'cursor-pointer'
  )}
  data-label={label}
  data-description={description}
  data-media-url={mediaUrl}
>
  <div
    class="relative rounded-2xl bg-primary/10 p-4 text-primary transition-colors duration-300 group-hover:bg-primary group-hover:text-primary-foreground"
  >
    <Icon class="h-8 w-8" />
    <div
      class="absolute inset-0 scale-0 rounded-2xl bg-primary/5 opacity-0 transition-all duration-300 group-hover:scale-100 group-hover:opacity-100"
    >
    </div>
  </div>
  <p
    class="text-sm font-medium text-foreground transition-colors duration-300 group-hover:text-primary"
  >
    {label}
  </p>
</div>

<script>
  const hobbyItems = document.querySelectorAll('.hobby-item')

  hobbyItems.forEach((item) => {
    if (!item.getAttribute('data-media-url')) return
    item.addEventListener('click', () => {
      const { label, description, mediaUrl } = (item as HTMLElement).dataset
      showModal(label, description, mediaUrl)
    })
  })

  function showModal(
    label: string | undefined,
    description: string | undefined,
    mediaUrl: string | undefined
  ) {
    const existingModal = document.querySelector('.hobby-modal')
    if (existingModal) return

    const modal = document.createElement('dialog')
    modal.classList.add(
      'hobby-modal',
      'fixed',
      'inset-0',
      'z-50',
      'flex',
      'items-center',
      'justify-center',
      'bg-transparent',
      'transition-all',
      'duration-300',
      'ease-in-out',
      'opacity-0',
      'scale-95'
    )

    modal.innerHTML = `
      <div class="relative w-full max-w-lg overflow-hidden rounded-lg bg-background shadow-xl transition-all duration-300 ease-in-out opacity-0 scale-95">
        <button
          class="close-modal absolute right-2 top-2 z-10 text-gray-500 hover:text-gray-700"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
        ${getMediaContent(mediaUrl, label)}
        <div class="p-6">
          <h3 class="mb-2 text-2xl font-bold">${label}</h3>
          <p class="text-muted-foreground">${description}</p>
        </div>
      </div>
    `

    document.body.appendChild(modal)

    const closeButton = modal.querySelector('.close-modal')
    if (closeButton) {
      closeButton.addEventListener('click', () => closeModal(modal))
    }

    modal.addEventListener('click', (event) => {
      if (event.target === modal) {
        closeModal(modal)
      }
    })

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closeModal(modal)
      }
    })

    modal.showModal()

    // Trigger open animation
    setTimeout(() => {
      modal.classList.remove('opacity-0', 'scale-95')
      modal.classList.add('opacity-100', 'scale-100')
      const modalContent = modal.querySelector('div')
      if (modalContent) {
        modalContent.classList.remove('opacity-0', 'scale-95')
        modalContent.classList.add('opacity-100', 'scale-100')
      }
    }, 10)
  }

  function closeModal(modal: HTMLDialogElement) {
    // Trigger close animation
    modal.classList.remove('opacity-100', 'scale-100')
    modal.classList.add('opacity-0', 'scale-95')
    const modalContent = modal.querySelector('div')
    if (modalContent) {
      modalContent.classList.remove('opacity-100', 'scale-100')
      modalContent.classList.add('opacity-0', 'scale-95')
    }

    // Remove modal after animation
    setTimeout(() => {
      modal.close()
      document.body.removeChild(modal)
    }, 300)
  }

  function getMediaContent(
    mediaUrl: string | undefined,
    label: string | undefined
  ) {
    if (mediaUrl && isYouTubeEmbed(mediaUrl)) {
      return `<iframe src="${getYouTubeEmbedUrl(mediaUrl)}" class="h-64 w-full" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen title="${label}" loading="lazy"></iframe>`
    } else if (mediaUrl && isVideo(mediaUrl)) {
      return `<video src="${mediaUrl}" class="h-64 w-full object-cover" autoplay loop muted playsinline></video>`
    } else {
      return `<img src="${mediaUrl}" alt="${label}" class="h-64 w-full object-cover" loading="lazy" />`
    }
  }

  function isYouTubeEmbed(url: string | string[]) {
    return url.includes('youtube.com/embed/')
  }

  function getYouTubeEmbedUrl(url: string) {
    const videoId = url.split('/embed/')[1].split('?')[0]
    return `https://www.youtube.com/embed/${videoId}?loop=1&playlist=${videoId}&controls=0&showinfo=0&modestbranding=1`
  }

  function isVideo(url: string) {
    const videoExtensions = ['.mp4', '.webm', '.ogg']
    return videoExtensions.some((ext) => url.toLowerCase().endsWith(ext))
  }
</script>
