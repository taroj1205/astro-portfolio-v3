---
import { Image } from 'astro:assets'

const { label, description, mediaUrl } = Astro.props

const isVideo = (url: string) => {
  const videoExtensions = ['.mp4', '.webm', '.ogg']
  return videoExtensions.some((ext) => url.toLowerCase().endsWith(ext))
}

const isYouTubeEmbed = (url: string) => {
  return url.includes('youtube.com/embed/')
}

const getYouTubeEmbedUrl = (url: string) => {
  const videoId = url.split('/embed/')[1].split('?')[0]
  return `https://www.youtube.com/embed/${videoId}?loop=1&playlist=${videoId}&controls=0&showinfo=0&modestbranding=1`
}
---

<dialog
  class="hobby-modal fixed inset-0 z-50 flex translate-y-full items-center justify-center bg-black bg-opacity-50 transition-all duration-300 ease-out open:translate-y-0"
>
  <div
    class="relative w-full max-w-lg overflow-hidden rounded-lg bg-background shadow-xl"
  >
    <button
      class="close-modal absolute right-2 top-2 z-10 text-gray-500 hover:text-gray-700"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        ><line x1="18" y1="6" x2="6" y2="18"></line><line
          x1="6"
          y1="6"
          x2="18"
          y2="18"></line></svg
      >
    </button>
    {
      isYouTubeEmbed(mediaUrl) ? (
        <iframe
          src={getYouTubeEmbedUrl(mediaUrl)}
          class="h-64 w-full"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
          title={label}
          loading="lazy"
        />
      ) : isVideo(mediaUrl) ? (
        <video
          src={mediaUrl}
          class="h-64 w-full object-cover"
          autoplay
          loop
          muted
          playsinline
        />
      ) : (
        <Image
          src={mediaUrl}
          alt={label}
          height={400}
          width={600}
          class="h-64 w-full object-cover"
          loading="lazy"
        />
      )
    }
    <div class="p-6">
      <h3 class="mb-2 text-2xl font-bold">{label}</h3>
      <p class="text-muted-foreground">{description}</p>
    </div>
  </div>
</dialog>
<!-- 
<script>
  const modals = document.querySelectorAll('.hobby-modal')
  const closeButtons = document.querySelectorAll('.close-modal')

  closeButtons.forEach((button) => {
    button.addEventListener('click', (e) => {
      const dialog = button.closest('dialog')
      if (dialog) {
        ;(dialog as HTMLDialogElement).close()
      }
    })
  })

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      modals.forEach((modal) => {
        ;(modal as HTMLDialogElement).close()
      })
    }
  })
</script> -->
