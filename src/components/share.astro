---
import { getUI } from '@/utils/i18n.astro'

const { lang } = Astro.params
const { popup } = getUI(lang)
---

<div>
  <button
    id="share-button"
    class="fixed bottom-4 left-4 z-50 rounded-full bg-primary p-3 text-primary-foreground shadow-lg transition-all duration-300 ease-in-out hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 active:scale-95 sm:bottom-8 sm:left-8"
    aria-label={popup.share}
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="h-6 w-6"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
      <polyline points="16 6 12 2 8 6"></polyline>
      <line x1="12" y1="2" x2="12" y2="15"></line>
    </svg>
  </button>

  <dialog
    id="share-dialog"
    class="fixed bottom-16 left-4 mx-0 mb-4 origin-bottom-left scale-0 rounded-lg bg-background p-4 opacity-0 shadow-lg transition-all duration-300 ease-in-out backdrop:backdrop-blur-0 backdrop:transition-all sm:bottom-20 sm:left-8"
  >
    <div class="flex flex-col space-y-2">
      <button
        class="flex items-center space-x-2 rounded-md p-2 hover:bg-accent"
        id="copy-link"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-6 w-6"
        >
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
          ></path>
        </svg>
        <span>{popup.copy}</span>
      </button>

      <button
        id="native-share-button"
        class="flex items-center space-x-2 rounded-md p-2 hover:bg-accent"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-6 w-6"
        >
          <circle cx="18" cy="5" r="3"></circle>
          <circle cx="6" cy="12" r="3"></circle>
          <circle cx="18" cy="19" r="3"></circle>
          <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
          <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
        </svg>
        <span>{popup.share}</span>
      </button>
    </div>
  </dialog>
</div>

<script>
  const shareButton = document.getElementById(
    'share-button',
  ) as HTMLButtonElement
  const shareDialog = document.getElementById(
    'share-dialog',
  ) as HTMLDialogElement
  const copyLinkButton = document.getElementById(
    'copy-link',
  ) as HTMLButtonElement
  const nativeShareButton = document.getElementById('native-share-button')

  function toggleShareOptions() {
    if (shareDialog.open) {
      closeDialog()
    } else {
      openDialog()
    }
  }

  function openDialog() {
    shareDialog.showModal()
    shareDialog.classList.replace('opacity-0', 'opacity-100')
    shareDialog.classList.replace(
      'backdrop:backdrop-blur-0',
      'backdrop:backdrop-blur-sm',
    )
    shareDialog.classList.replace('scale-0', 'scale-100')
  }

  function closeDialog() {
    shareDialog.classList.replace('opacity-100', 'opacity-0')
    shareDialog.classList.replace(
      'backdrop:backdrop-blur-sm',
      'backdrop:backdrop-blur-0',
    )
    shareDialog.classList.replace('scale-100', 'scale-0')
    setTimeout(() => {
      shareDialog.close()
    }, 100)
  }

  shareButton.addEventListener('click', toggleShareOptions)

  shareDialog.addEventListener('click', (event: MouseEvent) => {
    const rect = shareDialog.getBoundingClientRect()
    const isInDialog =
      rect.top <= event.clientY &&
      event.clientY <= rect.top + rect.height &&
      rect.left <= event.clientX &&
      event.clientX <= rect.left + rect.width
    if (!isInDialog) {
      closeDialog()
    }
  })

  copyLinkButton.addEventListener('click', () => {
    navigator.clipboard.writeText(window.location.href).then(() => {
      const originalText = copyLinkButton.textContent
      copyLinkButton.textContent = 'Copied!'
      setTimeout(() => {
        copyLinkButton.textContent = originalText
        closeDialog()
      }, 2000)
    })
  })

  if (nativeShareButton) {
    nativeShareButton.addEventListener('click', () => {
      navigator
        .share({
          title: document.title,
          url: window.location.href,
        })
        .then(() => closeDialog())
        .catch(console.error)
    })
  }
</script>
